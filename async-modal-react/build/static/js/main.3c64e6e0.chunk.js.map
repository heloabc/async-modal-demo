{"version":3,"sources":["components/async_modal_hoc.jsx","App.js","serviceWorker.js","index.js"],"names":["Demo","state","text","handleOk","_this3","props","hanldeResolve","_this4","this","react_default","a","createElement","input","onChange","e","v","target","value","setState","style","marginTop","textAlign","es_button","marginRight","onClick","hanldeClose","type","React","Component","ModalHoc","modalProps","arguments","length","undefined","DefaultComponent","_React$Component","_temp","_getPrototypeOf2","_this","Object","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","visible","open","Promise","resolve","reject","close","_this2","inherits","createClass","key","modal","assign","footer","closable","onCancel","App","handleOpenModal","_callee","result","regenerator_default","wrap","_context","prev","next","refs","asyncModal","sent","console","log","stop","className","async_modal_hoc","ref","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c64e6e0.chunk.js","sourcesContent":["import React from 'react';\nimport { Modal, Input, Button } from 'antd';\n\nconst ModalHoc = (modalProps = {}) => DefaultComponent => class extends React.Component {\n  state = {\n    visible: false,\n  }\n\n  open = () => {\n    this.setState({\n      visible: true,\n    });\n    return new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n\n  close = () => {\n    this.setState({\n      visible: false,\n    });\n    if (this.reject && typeof this.reject === 'function') {\n      this.reject('cancel');\n    }\n  }\n\n  hanldeResolve = (...params) => {\n    if (typeof this.resolve === 'function') {\n      this.resolve(...params);\n    }\n    delete this.reject;\n    this.close();\n  }\n\n  render() {\n    return <Modal\n      {...modalProps}\n      visible={this.state.visible}\n      footer={null}\n      closable\n      onCancel={this.close}\n    >\n      <DefaultComponent\n        {...this.props}\n        hanldeResolve={this.hanldeResolve}\n        hanldeClose={this.close}\n      ></DefaultComponent>\n    </Modal>\n  }\n}\n\nclass Demo extends React.Component {\n  state = {\n    text: '',\n  }\n\n  handleOk = () => {\n    this.props.hanldeResolve(this.state.text)\n  }\n\n  render() {\n    return <div>\n      <div>\n        hello\n        </div>\n      <div>\n        you can check result in devtool\n        </div>\n      <Input\n        onChange={e => {\n          const v = (e && e.target && e.target.value) || '';\n          this.setState({\n            text: v,\n          })\n        }}\n        value={this.state.text}\n      ></Input>\n      <div style={{\n        marginTop: 10,\n        textAlign: 'right'\n      }}>\n        <Button style={{marginRight: 5}} onClick={this.props.hanldeClose}>取消</Button>\n        <Button type=\"primary\" onClick={this.handleOk}>确定</Button>\n      </div>\n    </div>\n  }\n}\n\nexport default ModalHoc()(Demo);","import React from 'react';\nimport './App.css';\nimport { Button } from 'antd';\nimport AsyncModal from './components/async_modal_hoc';\n\nclass App extends React.Component {\n\n  handleOpenModal = async () => {\n    if (this.refs.asyncModal) {\n      const result = await this.refs.asyncModal.open();\n      console.log(result)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Button\n          onClick={this.handleOpenModal}\n        >\n          Open Modal\n        </Button>\n        <AsyncModal ref=\"asyncModal\"></AsyncModal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}